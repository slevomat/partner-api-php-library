<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-11-16 at 12:16:49.
 */
class Slevomat_Client_Response_SuccessTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Slevomat_Client_Response_Success
     */
    protected $object;

    /**
     * Success test data
     * @var array 
     */
    public $testData = [
        'result' => true,
        'data' => [
            'token' => '123456789012345',
            'code' => '234567890-123',
            'voucherData' => ['title' => 'VoucherName']
        ],
        'error' => [
            'code' => 0,
            'message' => null
        ]
    ];

    /**
     * Get Method accessible
     * 
     * @param string $name
     * 
     * @return type
     */
    protected static function getMethod($name)
    {
        $class  = new ReflectionClass('Slevomat_Client_Response_Success');
        $method = $class->getMethod($name);
        $method->setAccessible(true);
        return $method;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Slevomat_Client_Response_Success($this->testData,
            200);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * Test Constructor
     *
     * @covers Slevomat_Client_Response_Success::__construct
     */
    public function testConstructor()
    {
        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder(get_class($this->object))
            ->disableOriginalConstructor()
            ->getMockForAbstractClass();
        $mock->__construct($this->testData, 200);
    }

    /**
     * @covers Slevomat_Client_Response_Success::parseResponseData
     */
    public function testParseResponseData()
    {
        $parseResponseData = self::getMethod('parseResponseData');
        $result            = $parseResponseData->invokeArgs($this->object,
            [['data' => 'response']]);
    }

    /**
     * @covers Slevomat_Client_Response_Success::getData
     */
    public function testGetData()
    {
        $this->object->getData();
    }

    /**
     * @covers Slevomat_Client_Response_Success::getIterator
     */
    public function testGetIterator()
    {
        $this->object->getIterator();
    }

    /**
     * @covers Slevomat_Client_Response_Abstract::getResult
     */
    public function testGetResult()
    {
        $this->object->getResult();
    }

    /**
     * @covers Slevomat_Client_Response_Abstract::getHttpCode
     */
    public function testGetHttpCode()
    {
        $this->object->getHttpCode();
    }
}
